---
description: Python開発のルールとベストプラクティス
alwaysApply: false
---
# Python開発ルール

## Python設定
- Python 3.10以降を対象とする（推奨: Python 3.11+）
- 型ヒントを積極的に使用する
- f-stringsを使用する
- PEP 8に準拠する

## コードスタイル
```python
"""モジュールのドキュメント文字列"""
from __future__ import annotations

from typing import Optional, List, Dict
import logging

logger = logging.getLogger(__name__)
```

## 型ヒント
```python
def calculate_total(
    items: List[Dict[str, float]], 
    tax_rate: float = 0.1
) -> float:
    """合計金額を計算する"""
    subtotal = sum(item["price"] * item["quantity"] for item in items)
    return subtotal * (1 + tax_rate)
```

## フレームワーク別ガイドライン

### FastAPI
```python
from fastapi import FastAPI, HTTPException
from pydantic import BaseModel

app = FastAPI()

class User(BaseModel):
    name: str
    email: str

@app.post("/users")
async def create_user(user: User):
    # 実装
    return {"id": 1, **user.dict()}
```

### Django
```python
from django.db import models
from django.contrib.auth.models import AbstractUser

class CustomUser(AbstractUser):
    """カスタムユーザーモデル"""
    bio = models.TextField(blank=True)
    
    class Meta:
        db_table = "users"
```

## ベストプラクティス
- 仮想環境を使用する（venv/poetry）
- requirements.txtまたはpyproject.tomlで依存関係を管理
- Black/Ruffでコードをフォーマット
- mypyで型チェック
- ロギングを適切に使用

## エラーハンドリング
```python
class CustomError(Exception):
    """カスタム例外クラス"""
    pass

try:
    result = risky_operation()
except SpecificError as e:
    logger.error(f"特定のエラーが発生: {e}")
    raise CustomError("処理に失敗しました") from e
```

## テスト
```python
import pytest
from unittest.mock import Mock, patch

def test_calculate_total():
    """合計計算のテスト"""
    items = [
        {"price": 100, "quantity": 2},
        {"price": 50, "quantity": 1}
    ]
    assert calculate_total(items) == 275.0

@pytest.mark.asyncio
async def test_async_function():
    """非同期関数のテスト"""
    result = await async_operation()
    assert result is not None
```

## パフォーマンス
- ジェネレータを活用する
- 適切なデータ構造を選択する
- asyncioで非同期処理
- キャッシュを適切に使用